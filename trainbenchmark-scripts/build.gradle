apply plugin: 'groovy'

dependencies {
	implementation group: 'org.apache.groovy', name: 'groovy', version: groovyVersion
	implementation project(':trainbenchmark-generator')
	implementation project(':trainbenchmark-generator-emf')
	implementation project(':trainbenchmark-generator-graph-neo4j')
	implementation project(':trainbenchmark-generator-graph-tinkerpop')
	implementation project(':trainbenchmark-generator-rdf')
	implementation project(':trainbenchmark-generator-sql')
	implementation project(':trainbenchmark-tool')
	implementation project(':trainbenchmark-tool-emfapi')
	implementation project(':trainbenchmark-tool-eclipseocl')
	implementation project(':trainbenchmark-tool-jena')
	implementation project(':trainbenchmark-tool-sesame')
	implementation project(':trainbenchmark-tool-mysql')
	implementation project(':trainbenchmark-tool-neo4j')
	implementation project(':trainbenchmark-tool-sqlite')
	implementation project(':trainbenchmark-tool-tinkergraph')
	implementation project(':trainbenchmark-tool-viatra')
}

sourceSets {
	main {
		groovy { srcDirs = ['src']}
	}
}

/**
 * Initialize the generator, benchmark, etc. scripts in src directory,
 * based on the template script in the src-template directory.
 */
tasks.register('initScripts', Copy) {
	from 'src-template'
	into 'src'
	include '*.groovy'
}

/**
 * Save the current scripts from the src directory to the src-template directory.
 * Use with caution and double check the diffs before committing the changes.
 */
tasks.register('saveScripts', Copy) {
	from 'src'
	into 'src-template'
	include '*.groovy'
}

tasks.register('cleanResults', Delete) {
	doFirst {
		def resultDir = "../results"
		file(resultDir).eachDir { dir ->
			delete "${dir}"
		}
	}
}

tasks.register('benchmark', JavaExec) {
	dependsOn 'classes'
	mainClass = 'BenchmarkScript'
	classpath = sourceSets.main.runtimeClasspath
}

tasks.register('generate', JavaExec) {
	dependsOn 'classes'
	mainClass = 'GeneratorScript'
	classpath = sourceSets.main.runtimeClasspath
}

tasks.register('individualBenchmark', JavaExec) {
	dependsOn 'classes'
	mainClass = 'IndividualBenchmarkScript'
	classpath = sourceSets.main.runtimeClasspath
}

generate.dependsOn(":trainbenchmark-generator-emf:shadowJar")
generate.dependsOn(":trainbenchmark-generator-rdf:shadowJar")
generate.dependsOn(":trainbenchmark-generator-graph-neo4j:shadowJar")
generate.dependsOn(":trainbenchmark-generator-graph-tinkerpop:shadowJar")
generate.dependsOn(":trainbenchmark-generator-sql:shadowJar")

benchmark.dependsOn(':trainbenchmark-tool-emfapi:shadowJar')
benchmark.dependsOn(':trainbenchmark-tool-eclipseocl:shadowJar')
benchmark.dependsOn(':trainbenchmark-tool-jena:shadowJar')
benchmark.dependsOn(':trainbenchmark-tool-mysql:shadowJar')
benchmark.dependsOn(':trainbenchmark-tool-neo4j:shadowJar')
benchmark.dependsOn(':trainbenchmark-tool-sqlite:shadowJar')
benchmark.dependsOn(':trainbenchmark-tool-tinkergraph:shadowJar')
benchmark.dependsOn(':trainbenchmark-tool-viatra:shadowJar')

individualBenchmark.dependsOn(':trainbenchmark-tool-emfapi:shadowJar')
individualBenchmark.dependsOn(':trainbenchmark-tool-eclipseocl:shadowJar')
individualBenchmark.dependsOn(':trainbenchmark-tool-jena:shadowJar')
individualBenchmark.dependsOn(':trainbenchmark-tool-mysql:shadowJar')
individualBenchmark.dependsOn(':trainbenchmark-tool-neo4j:shadowJar')
individualBenchmark.dependsOn(':trainbenchmark-tool-sqlite:shadowJar')
individualBenchmark.dependsOn(':trainbenchmark-tool-tinkergraph:shadowJar')
individualBenchmark.dependsOn(':trainbenchmark-tool-viatra:shadowJar')
